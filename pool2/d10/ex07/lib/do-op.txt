/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   do-op.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: darugula <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/07/15 15:09:10 by darugula          #+#    #+#             */
/*   Updated: 2019/07/15 15:09:13 by darugula         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#define BOOL int
#define FALSE 0
#define TRUE 1

#include <unistd.h>
#include <stdio.h>




BOOL	starts_with_number(char *str)
{
	if (*str == 0)
	{
		return (FALSE);
	}
	return (*str == '-') ? is_digit(*(str + 1)) : is_digit(*str);
}

char	*uitoa(int n, char *r)
{
	if (n < 10)
	{
		*r = (char)('0' + n);
		r++;
		return (r);
	}
	return (uitoa(n % 10, uitoa(n / 10, r)));
}

char	*itoa(int n, char *r)
{
	char *str;
	
	str = r;
	if (n < 0)
	{
		*r = '-';
		r++;
		n = -n;
	}
	r = uitoa(n, r);
	*r = '\0';
	return (str);
}

int		atoi_unchecked(char *str, int n)
{
	if (*str == 0)
	{
		return n;
	}
	if (!is_digit(*str))
	{
		return n;
	}
	return atoi_unchecked(str + 1, n * 10 + *str - '0');
}

int		atoi(char* str)
{
	if (!str || *str == 0)
	{
		return 0;
	}
	return (*str == '-') ? -atoi_unchecked(++str, 0) : atoi_unchecked(str, 0);
}

BOOL	try_parse(char* str, int *n)
{
	if (!starts_with_number(str))
	{
		return (FALSE);
	}
	*n = atoi(str);
	return (TRUE);
}

int plus(int a, int b)
{
	return a + b;
}
int minus(int a, int b)
{
	return a - b;
}
int div(int a, int b)
{
	return a / b;
}
int mul(int a, int b)
{
	return a * b;
}
int mod(int a, int b)
{
	return a % b;
}

struct entry {
	char *name;
	int (*ptr)(int,int);
};

struct entry vtable[] =
{
	{"+", &plus},
	{"-", &minus},
	{"/", &div},
	{"*", &mul},
	{"%", &mul},
	{0,0}
};

int (*find_op(char* name))(int,int)
{
	int	i;
	if (!name)
	{
		return (NULL);
	}
	if (*name == 0)
	{
		return (NULL);
	}
	i = 0;
	while(vtable[i].name!=0)
	{
		//printf("i = %d, name = '%s', compare with '%s'\n", i, vtable[i].name, name);
		if(ft_strcmp(vtable[i].name, name) == 0)
		{
			//printf("'%s' found: %d - '%s'\n", name, i, vtable[i].name);
			return vtable[i].ptr;
		}
		++i;
	}
	//printf("'%s' not found\n", name );
	return NULL;
}


char*	do_op(int argc, char **argv, char dst[])
{
	int		a;
	int		b;
	int		(*op)(int, int);

	if (argc != 4)
	{
		return ("");
	}
	if (!try_parse(argv[1], &a))
	{
		a = 0;
	}
	if (!try_parse(argv[3], &b))
	{
		b = 0;
	}
	op = find_op(argv[2]);
	if (op == NULL)
	{
		return "0\n";
	}
	printf("%d %s %d = %d\n", a, argv[2], b, op(a,b)) ;
	itoa(op(a, b), dst);
	int len =ft_strlen(dst);
	dst[len++] = '\n';
	dst[len] = 0;
	return (dst);
}
